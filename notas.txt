primero instalamos python
lo descargamos de python oficial y luego lo instalamos, no olvidarse de tildar la opcion para que ponga el path en las variables de entorno. 
liego instalamos django con la intruccion

python -m pip install django==4.1.7 que es la ultima version que hoy esta disponible

luego dentro de la carpeta para el projecto hacemos
django-admin startproject miNomreProjecto . eso nos crea las carpetas para iniciar el projecto

estando en el projecto nos posicionamos en la carpeta miNombreProjecto

una vez en la carptea del proyecto tenemos que hacer la migracion para tener un backup de los datos

python manage.py migrate

despues que ya hice el migrate puedo llamar al servidor

python manage.py runserver y puedo llamar al localhost:8000 en mi navegador


vistas (views) son simplemente funciones en donde hago lo que quiero mostrar, si tengo que pasar variables desde los urls.py despues de la ruta entre <> pongo lo que quiero mandar al views ejemplo 
path('adulto/<int:edad>/', views.adulto, name='adulto')

******************

plantillas

como primer medida en settings.py tenemos que decirle donde encuentra las plantillas, 

creamos una carpeta desde el raiz de nuestro proyecto, misma altura qeu el manage.py y la llamamos template, mismo nombre que ponemos en template dentro del settings.py que se agega dentro de los corchetes y lo encerramos entr comillas.

en urls.py importamos la plantilla de la siguiente manera
from django.shortcuts import render

************************
crear superusuario de django

python manageg createsuperuser

crear aplicacion
phyton manage.py startapp catalog (nombre de mi app)

Ojo que si borrar algun catalogo se complica con la base de datos y hay que regenerar todo el catalogo nuevamente. mucho lio es por ahora


para usar en los get o filter para hacer un where id > o igual que y todas esas operaciones, se hacen de esta manera

ejemplo = Ejemplo.objetcs.filter(id__lte=15)

__lte: menor o igual que (lower than equals)
__gte: mayor o igual que (upper than equals)

__lt: menor que (lower than)
__ft mayor que (upper than)

_Contains: contiene
__Exact: exacto


PostgreSQL

para usar PostgreSQL hay que modificar en el settings del proyecto el DATABASES de la siguiente manera:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mydatabase',
        'USER': 'mydatabaseuser', # si no creaste el otro usuarios es  postgres
        'PASSWORD': 'mypassword', # es la contrase√±a que te hizo poner cuando instalaste el PostgreSQL
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

una vez que hiciste esta configuracion y el PostgreSQL que ya debe estar residente corriendo, podemos hacer el python manage.py migrate para que se conecte nuestro proyecto a la base de datos y genere todas las tablas en el PostgreSQL


